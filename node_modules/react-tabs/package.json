{
  "_args": [
    [
      {
        "raw": "react-tabs@^1.0.0",
        "scope": null,
        "escapedName": "react-tabs",
        "name": "react-tabs",
        "rawSpec": "^1.0.0",
        "spec": ">=1.0.0 <2.0.0",
        "type": "range"
      },
      "/home/m/Development/hackathon/opendatade_hackathon_chipin"
    ]
  ],
  "_from": "react-tabs@>=1.0.0 <2.0.0",
  "_id": "react-tabs@1.0.0",
  "_inCache": true,
  "_location": "/react-tabs",
  "_nodeVersion": "6.10.3",
  "_npmOperationalInternal": {
    "host": "packages-18-east.internal.npmjs.com",
    "tmp": "tmp/react-tabs-1.0.0.tgz_1494369619525_0.037803922314196825"
  },
  "_npmUser": {
    "name": "danez",
    "email": "daniel@tschinder.de"
  },
  "_npmVersion": "4.6.1",
  "_phantomChildren": {},
  "_requested": {
    "raw": "react-tabs@^1.0.0",
    "scope": null,
    "escapedName": "react-tabs",
    "name": "react-tabs",
    "rawSpec": "^1.0.0",
    "spec": ">=1.0.0 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/react-tabs/-/react-tabs-1.0.0.tgz",
  "_shasum": "f150c9f9102dd65dbc94a5a0e1e019d5e3814a7f",
  "_shrinkwrap": null,
  "_spec": "react-tabs@^1.0.0",
  "_where": "/home/m/Development/hackathon/opendatade_hackathon_chipin",
  "author": {
    "name": "Matt Zabriskie"
  },
  "bugs": {
    "url": "https://github.com/reactjs/react-tabs/issues"
  },
  "dependencies": {
    "classnames": "^2.2.0",
    "prop-types": "^15.5.0"
  },
  "description": "React tabs component",
  "devDependencies": {
    "babel-cli": "^6.9.0",
    "babel-core": "^6.9.1",
    "babel-eslint": "^7.0.0",
    "babel-jest": "^20.0.0",
    "babel-loader": "^7.0.0",
    "babel-plugin-transform-class-properties": "^6.11.5",
    "babel-plugin-transform-object-rest-spread": "^6.8.0",
    "babel-plugin-transform-react-remove-prop-types": "^0.4.0",
    "babel-preset-env": "^1.3.3",
    "babel-preset-react": "^6.5.0",
    "cross-env": "^4.0.0",
    "css-loader": "^0.28.0",
    "enzyme": "^2.3.0",
    "eslint": "^3.5.0",
    "eslint-config-airbnb": "^14.1.0",
    "eslint-plugin-import": "^2.2.0",
    "eslint-plugin-jsx-a11y": "^4.0.0",
    "eslint-plugin-react": "^6.2.1",
    "husky": "^0.13.3",
    "jest-cli": "^20.0.0",
    "lint-staged": "^3.4.0",
    "prettier": "^1.2.2",
    "react": "^15.0.0",
    "react-addons-test-utils": "^15.0.0",
    "react-dom": "^15.0.0",
    "react-modal": "^1.3.0",
    "react-test-renderer": "^15.5.4",
    "rimraf": "^2.5.2",
    "style-loader": "^0.17.0",
    "uglifyjs-webpack-plugin": "^0.4.2",
    "webpack": "^2.3.3",
    "webpack-dev-server": "^2.4.2"
  },
  "directories": {},
  "dist": {
    "shasum": "f150c9f9102dd65dbc94a5a0e1e019d5e3814a7f",
    "tarball": "https://registry.npmjs.org/react-tabs/-/react-tabs-1.0.0.tgz"
  },
  "files": [
    "dist",
    "lib",
    "style"
  ],
  "gitHead": "e9166bf9aec13a0fca9c9c904f72bab927ea6589",
  "homepage": "https://github.com/reactjs/react-tabs",
  "jest": {
    "roots": [
      "src"
    ]
  },
  "keywords": [
    "react",
    "tabs",
    "a11y",
    "react-component"
  ],
  "license": "MIT",
  "lint-staged": {
    "src/**/*.js": [
      "prettier --single-quote --print-width 100 --trailing-comma all --write",
      "git add"
    ]
  },
  "main": "lib/index.js",
  "maintainers": [
    {
      "name": "danez",
      "email": "daniel@tschinder.de"
    },
    {
      "name": "mzabriskie",
      "email": "mzabriskie@gmail.com"
    }
  ],
  "name": "react-tabs",
  "optionalDependencies": {},
  "peerDependencies": {
    "react": "^0.14.9 || ^15.3.0"
  },
  "readme": "# react-tabs [![Build Status](https://travis-ci.org/reactjs/react-tabs.svg?branch=master)](https://travis-ci.org/reactjs/react-tabs) [![npm version](https://img.shields.io/npm/v/react-tabs.svg)](https://www.npmjs.com/package/react-tabs)\n\nAccessible react tab component\n\n> Supports React 0.14 and 15\n\n> This is the documentation for 1.0 if you are looking for the documentation for version 0.8 please got to this [page](https://github.com/reactjs/react-tabs/blob/0.8/README.md)\n\n## Installing\n\n```bash\n$ yarn add react-tabs\n```\n\nYou can also still use npm\n\n```bash\nnpm install react-tabs --save\n```\n\nOr use directly in your html as UMD component\n\n```html\n<script src=\"https://unpkg.com/react-tabs@1.0.0/dist/react-tabs.min.js\" />\n```\n\n## Demo\n\nhttps://reactcommunity.org/react-tabs/example/\n\n(TODO: This demos are outdated and use super old versions of react and react-tabs)\n\n## Usage\n\n### Basic Example\n\n```js\nimport { Tab, Tabs, TabList, TabPanel } from 'react-tabs';\n\nexport default () => (\n  <Tabs>\n    <TabList>\n      <Tab>Title 1</Tab>\n      <Tab>Title 2</Tab>\n    </TabList>\n\n    <TabPanel>\n      <h2>Any content 1</h2>\n    </TabPanel>\n    <TabPanel>\n      <h2>Any content 2</h2>\n    </TabPanel>\n  </Tabs>\n);\n```\n\n### Components\n\nreact-tabs consists of 4 components which all need to be used together.\n\n### &lt;Tabs /&gt;\n\nIf you specify additional props on the `<Tabs />` component they will be forwarded to the rendered `<div />`.\n\n#### className: `string | Array<string> | { [string]: boolean }`\n\n> default: `\"react-tabs\"`\n\nProvide a custom class name for the outer `<div />` of the tabs.\n\n> You can also supply an array of class names or an object where the class names are the key and the value is a boolean indicating if the name should be added. See the docs of [classnames](https://github.com/JedWatson/classnames#usage) on how to supply different class names.\n\n#### defaultFocus: `boolean`\n\n> default: `false`\n\nIf set to `true` the tabs will be focused on initial render. This allows immediate use of keyboard keys to switch tabs after the first render.\n\n#### defaultIndex: `number`\n\n> default: `0`\n\nThis allows changing the tab that should be open on initial render. This is a zero-based index, so first tab is `0`, second tab is `1`, ...\n\n> This can only be used in uncontrolled mode when react-tabs handles the current selected tab internally and for this reason cannot be used together with `selectedIndex`. See [here](#controlled-vs-uncontrolled-mode) for more info on modes.\n\n#### disabledTabClassName: `string`\n\n> default: `\"react-tabs__tab--disabled\"`\n\nProvide a custom class name for disabled tabs.\n\n> This option can also be set directly at the `<Tab />` component.\n\n#### forceRenderTabPanel: `boolean`\n\n> default: `false`\n\nBy default only the current active tab will be rendered to DOM. If set to `true` all tabs will be rendered to the DOM always.\n\n> This can also be enabled for each individual `<TabPanel />` component with its prop `forceRender`.\n\n#### onSelect: `(index: number, lastIndex: number, event: Event) => ?boolean`\n\n> default: `undefined`\n\nThis event handler is called every time a tab is changed. It will be called with the `index` that will be changed to, the `lastIndex` which was selected before and the underlying `event` which is usually either a `keydown` or `click` event.\n\nThe callback can optionally return `true` to cancel the change to the new tab.\n\n> Returning `true` when the change to the new tab should be canceled is also important in controlled mode, as react-tabs still internally handles the focus of the tabs. (Really? maybe find a better way)\n\n> In controlled mode ths `onSelect` handler is required prop.\n\n#### selectedIndex: `number`\n\n> default: `null`\n\nSet the currently selected tab. This is a zero-based index, so first tab is `0`, second tab is `1`, ...\n\nThis enables controlled mode, which also requires `onSelect` to be set. See [here](#controlled-vs-uncontrolled-mode) for more info on modes.\n\n#### selectedTabClassName: `string`\n\n> default: `\"react-tabs__tab--selected\"`\n\nProvide a custom class name for the active tab.\n\n> This option can also be set directly at the `<Tab />` component.\n\n#### selectedTabPanelClassName: `string`\n\n> default: `\"react-tabs__tab-panel--selected\"`\n\nProvide a custom class name for the active tab panel.\n\n> This option can also be set directly at the `<TabPanel />` component.\n\n### &lt;TabList /&gt;\n\nIf you specify additional props on the `<TabList />` component they will be forwarded to the rendered `<ul />`.\n\n#### className: `string | Array<string> | { [string]: boolean }`\n\n> default: `\"react-tabs__tab-list\"`\n\nProvide a custom class name for the `<ul />`.\n\n> You can also supply an array of class names or an object where the class names are the key and the value is a boolean indicating if the name should be added. See the docs of [classnames](https://github.com/JedWatson/classnames#usage) on how to supply different class names.\n\n### &lt;Tab /&gt;\n\nIf you specify additional props on the `<Tab />` component they will be forwarded to the rendered `<li />`.\n\n#### disabledClassName: `string`\n\n> default: `\"react-tabs__tab--disabled\"`\n\nProvide a custom class name for disabled tabs.\n\n#### className: `string | Array<string> | { [string]: boolean }`\n\n> default: `\"react-tabs__tab\"`\n\nProvide a custom class name for the `<li />`.\n\n> You can also supply an array of class names or an object where the class names are the key and the value is a boolean indicating if the name should be added. See the docs of [classnames](https://github.com/JedWatson/classnames#usage) on how to supply different class names.\n\n#### selectedClassName: `string`\n\n> default: `\"react-tabs__tab--selected\"`\n\nProvide a custom class name for the active tab.\n\n### &lt;TabPanel /&gt;\n\nIf you specify additional props on the `<TabPanel />` component they will be forwarded to the rendered `<dev />`.\n\n#### className: `string | Array<string> | { [string]: boolean }`\n\n> default: `\"react-tabs__tab-panel\"`\n\nProvide a custom class name for the `<div />` containing the tab content.\n\n> You can also supply an array of class names or an object where the class names are the key and the value is a boolean indicating if the name should be added. See the docs of [classnames](https://github.com/JedWatson/classnames#usage) on how to supply different class names.\n\n#### forceRender: `boolean`\n\n> default: `false`\n\nBy default the tab content will only be rendered when the tab is active. If set to `true` the tab will also be rendered if inactive.\n\n> This can also be enabled for all `<TabPanel />` components with the prop `forceRenderTabPanel` on `<Tabs />`.\n\n#### selectedClassName: `string`\n\n> default: `\"react-tabs__tab-panel--selected\"`\n\nProvide a custom class name for the active tab panel.\n\n## Controlled vs Uncontrolled mode\n\nReact tabs has two different modes it can operate in, which change the way how much you need to take care about the state yourself.\n\n### Uncontrolled mode\n\nThis is the default mode of react-tabs and makes the react-tabs components handle its state internally. You can change the starting tab with `defaultIndex` and you can listen for changes with `onSelect`.\n\nIn this mode you cannot force a tab change during runtime.\n\n```js\n<Tabs defaultIndex={1} onSelect={index => console.log(index)}>\n  <TabList>\n    <Tab>Title 1</Tab>\n    <Tab>Title 2</Tab>\n  </TabList>\n  <TabPanel></TabPanel>\n  <TabPanel></TabPanel>\n</Tabs>\n```\n\n### Controlled mode\n\nThis mode has to be enabled by supplying `selectedIndex` to the `<Tabs />` component.\n\nIn this mode react-tabs does not handle any tab selection state internally and leaves all the state management up to the outer application.\n\nThis mode als enforces you to set a handler for `onSelect`. `defaultIndex` does not have any effect and will therefore throw an error.\n\n```js\nclass App extends Component {\n  constructor() {\n    this.state = { tabIndex: 0 };\n  }\n  render() {\n    return (\n      <Tabs selectedIndex={this.state.tabIndex} onSelect={tabIndex => this.setState({ tabIndex })}>\n        <TabList>\n          <Tab>Title 1</Tab>\n          <Tab>Title 2</Tab>\n        </TabList>\n        <TabPanel></TabPanel>\n        <TabPanel></TabPanel>\n      </Tabs>\n    );\n  }\n}\n```\n\n## Styling\n\nreact-tabs does not include any style loading by default. Default stylesheets are provided and can be included in your application if desired.\n\n### Webpack\n\nWhen using webpack and a appropriate loader (`css-loader`, `sass-loader`, `less-loader` or `style-loader`) you can simply import the default stylesheet.\n\n```js\nimport 'react-tabs/style/react-tabs.css';\n// or\nimport 'react-tabs/style/react-tabs.scss';\n// or\nimport 'react-tabs/style/react-tabs.less';\n```\n\n### SASS\n\nWhen using SASS you can easily import the default styles\n\n```scss\n@import '../../path/to/node_modules/react-tabs/style/react-tabs.scss';\n```\n\n### LESS\n\nWhen using LESS you can easily import the default styles\n\n```scss\n@import '../../path/to/node_modules/react-tabs/style/react-tabs.less';\n```\n\n### Custom\n\nYou can also always just simply copy the default style to your own css/scss/less and modify it to your own needs. The changelog will always tell you when classes change and we also consider changes that break the styling as semver major.\n\n## License\n\nMIT\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/reactjs/react-tabs.git"
  },
  "scripts": {
    "build": "npm run clean && npm run build:commonjs",
    "build:commonjs": "babel src/ --out-dir lib/ --ignore __tests__,__mocks__",
    "build:umd": "webpack --config webpack.build.js",
    "build:umd:min": "cross-env MINIFY=1 webpack --config webpack.build.js",
    "bundle": "mkdir -p dist && npm run build:umd && npm run build:umd:min",
    "clean": "rimraf lib",
    "format": "prettier --write --single-quote --print-width 100 --trailing-comma all \"src/**/*.js\"",
    "lint": "eslint src",
    "precommit": "lint-staged",
    "prepublish": "npm run build",
    "preversion": "npm run lint && npm test && npm run build && npm run bundle && git add dist/ && git diff --quiet --exit-code --cached || git commit -n -m 'publish: Distribution'",
    "start": "webpack-dev-server --inline --content-base examples/",
    "test": "jest"
  },
  "version": "1.0.0"
}
